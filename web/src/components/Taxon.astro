---
type R<T> = Record<string, T>
type RU = R<unknown>

const { json } = Astro.props as {
  json: {
    [key: string]: unknown
    distribution: {
      origin: string
      endemism: string
      phytogeographicDomains: string[]
      occurrence: string[]
      vegetationType: string[]
    }
    reference: RU[]
    othernames: RU[]
    vernacularname: R<string>[]
    occurrences?: R<string>[]
    groupedOccurrences?: {
      country: string
      states: {
        state: string
        municipalities: {
          municipality: string
          localities: R<string | undefined>[]
        }[]
      }[]
    }[]
  }
}

if (json.occurrences) {
  json.groupedOccurrences = json.occurrences
    .sort(
      (a, b) =>
        (a.country?.localeCompare(b.country ?? '') ?? 0) ||
        (a.stateProvince?.localeCompare(b.stateProvince ?? '') ?? 0) ||
        (a.municipality?.localeCompare(b.municipality ?? '') ?? 0) ||
        (a.locality?.localeCompare(b.locality ?? '') ?? 0)
    )
    .reduce(
      (acc, { country, stateProvince, municipality, locality, ...rest }) => {
        if (locality) locality = locality.replace(/[ .]*$/, '')
        if (acc.at(-1)?.country !== country) {
          acc.push({
            country: country ?? '??',
            states: [
              {
                state: stateProvince ?? '',
                municipalities: [
                  {
                    municipality: municipality ?? '',
                    localities: [{ locality, ...rest }]
                  }
                ]
              }
            ]
          })
        } else if (acc.at(-1)?.states.at(-1)?.state !== stateProvince) {
          acc.at(-1)?.states.push({
            state: stateProvince ?? '',
            municipalities: [
              {
                municipality: municipality ?? '',
                localities: [{ locality, ...rest }]
              }
            ]
          })
        } else if (
          acc.at(-1)?.states.at(-1)?.municipalities.at(-1)?.municipality !==
          municipality
        ) {
          acc
            .at(-1)
            ?.states.at(-1)
            ?.municipalities.push({
              municipality: municipality ?? '',
              localities: [{ locality, ...rest }]
            })
        } else if (locality) {
          acc
            .at(-1)
            ?.states.at(-1)
            ?.municipalities.at(-1)
            ?.localities.push({ locality, ...rest })
        }
        return acc
      },
      [] as {
        country: string
        states: {
          state: string
          municipalities: {
            municipality: string
            localities: R<string | undefined>[]
          }[]
        }[]
      }[]
    )
}
import Map from './Map.astro'
import Section from './Section.astro'
import TaxonLink from './TaxonLink.astro'
console.log(json.occurrences)
---

<div
  class="m-6 w-[600px] bg-white p-4 shadow-lg border-slate-200 border rounded"
>
  <h1 class="font-bold text-lg text-green-800 mb-4">{json.scientificName}</h1>
  <Section
    fields={{
      ID: json.taxonID,
      'Nome científico': json.scientificName,
      'Nome científico autor': json.scientificNameAuthorship,
      'Nome aceito': json.acceptedNameUsage,
      'Nome aceito ID': json.acceptedNameUsageID,
      'Nome original ID': json.originalNameUsageID,
      'Nome publicado em': json.namePublishedIn,
      'Nome publicado em ano': {
        link: `/taxa?namePublishedInYear=${json.namePublishedInYear}`,
        text: json.namePublishedInYear
      },
      Reino: { link: `/taxa?kingdom=${json.kingdom}`, text: json.kingdom },
      Grupo: {
        link: `/taxa?higherClassification=${json.higherClassification}`,
        text: json.higherClassification
      },
      Família: { link: `/taxa?family=${json.family}`, text: json.family },
      Gênero: { link: `/taxa?genus=${json.genus}`, text: json.genus },
      'Epíteto específico': {
        link: `/taxa?specificEpithet=${json.specificEpithet}`,
        text: json.specificEpithet
      },
      Rank: json.taxonRank,
      'Status taxonômico': json.taxonomicStatus,
      'Status nomenclatural': json.nomenclaturalStatus,
      Modificado: json.modified,
      'Citação bibliográfica': json.bibliographicCitation
    }}
  />
  {
    json.othernames?.length > 0 && (
      <>
        <h2 class="pt-2 font-bold">Outros nomes</h2>
        <ul class="list-disc list-inside">
          {json.othernames?.map(({ taxonID, taxonomicStatus }) => (
            <li class="pl-2">
              <TaxonLink taxonId={taxonID} /> - {taxonomicStatus}
            </li>
          ))}
        </ul>
      </>
    )
  }

  {
    Object.keys(json.distribution ?? {}).length > 0 && (
      <div class="flex items-start">
        <div class="basis-1/2">
          <Section
            title="Distribuição"
            fields={{
              Origem: json.distribution?.origin,
              Endemismo: json.distribution?.endemism,
              'Domínios fitogeográficos':
                json.distribution?.phytogeographicDomains?.join(', '),
              Ocorrência: json.distribution?.occurrence?.sort().join(', '),
              'Tipo de vegetação': json.distribution?.vegetationType?.join(', ')
            }}
          />
        </div>
        {json.distribution?.occurrence && (
          <div class="basis-1/2">
            <Map stateList={json.distribution.occurrence} />
          </div>
        )}
      </div>
    )
  }

  <Section
    title="Referência"
    fields={{
      'Citação bibliográfica': json.reference?.[0]?.bibliographicCitation,
      Título: json.reference?.[0]?.title,
      Autor: json.reference?.[0]?.creator,
      Data: json.reference?.[0]?.date,
      Tipo: json.reference?.[0]?.type
    }}
  />
  {
    json.vernacularname && (
      <>
        <h2 class="pt-2 font-bold">Nomes vernaculares</h2>
        <ul class="list-disc pl-5">
          {json.vernacularname
            .sort(
              (a, b) =>
                a.vernacularName?.localeCompare(b.vernacularName ?? '') ?? 0
            )
            .map(({ vernacularName, language, locality }) => (
              <li>
                {vernacularName}, {locality} -{' '}
                <span class="text-xs italic">{language}</span>
              </li>
            ))}
        </ul>
      </>
    )
  }
  {
    json.groupedOccurrences && (
      <>
        <h2 class="pt-2 font-bold">Ocorrências ({json.occurrences?.length})</h2>

        {json.groupedOccurrences.map(({ country, states }) => (
          <div class="flex flex-col">
            <div class="font-bold">{country}</div>
            <ul class="list-disc pl-5">
              {states.map(({ state, municipalities }) => (
                <li>
                  <div class="flex flex-col">
                    <div>{state}</div>
                    <ul class="list-[circle] pl-5">
                      {municipalities.map(({ municipality, localities }) => (
                        <li>
                          <div class="flex flex-col">
                            <div>{municipality}</div>
                            {localities?.length > 0 && localities[0] && (
                              <ul class="list-[square] pl-5">
                                {localities.map((info) => (
                                  <li>
                                    <div class="flex flex-col gap-1">
                                      <div>
                                        {`${info.institutionCode}/${info.collectionCode}`}
                                        -
                                        {[info.day, info.month, info.year]
                                          .filter(Boolean)
                                          .join('/')}{' '}
                                        - {info.recordedBy}
                                      </div>
                                      {(info.occurrenceRemarks ||
                                        json.fieldNotes) && (
                                        <div class="bg-slate-100 rounded px-2">
                                          {info.fieldNotes ||
                                            info.occurrenceRemarks}
                                        </div>
                                      )}
                                      {info.locality && (
                                        <div>{info.locality}</div>
                                      )}
                                    </div>
                                  </li>
                                ))}
                              </ul>
                            )}
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </>
    )
  }
  <details>
    <summary class="text-blue-600">JSON</summary>
    <pre
      class="bg-slate-200 shadow-inner overflow-y-auto">
    {JSON.stringify(json, null, 2)}
    </pre>
  </details>
</div>
