---
import Layout from '../layouts/base.astro'
import { 
  getOccurrenceCountPerKingdom,
  getTaxaCountPerKingdom,
  getThreatenedCountPerKingdom,
  getThreatenedCategoriesPerKingdom,
  getInvasiveCountPerKingdom,
  getInvasiveTopOrders,
  getInvasiveTopFamilies,
  getTaxaCountPerOrderByKingdom,
  getTaxaCountPerFamilyByKingdom
} from '../lib/mongo'
import fs from 'fs'
import path from 'path'

// Lê o conteúdo do arquivo dashReadme.md da raiz do repositório
let readmeContent = ''
try {
  // Múltiplas tentativas de localizar o arquivo dashReadme.md
  const possiblePaths = [
    path.resolve(process.cwd(), '../../../dashReadme.md'),
    path.resolve(process.cwd(), '../../dashReadme.md'),
    path.resolve(process.cwd().split('web')[0], 'dashReadme.md'),
    path.resolve(process.cwd(), '../dashReadme.md'),
    path.resolve(process.cwd(), './dashReadme.md'),
    path.resolve(__dirname, '../../../dashReadme.md'),
    path.resolve(__dirname, '../../../../dashReadme.md'),
    // Caminho direto baseado na estrutura conhecida
    'F:\\git\\DarwinCoreJSON\\dashReadme.md'
  ]
  
  let fileFound = false
  for (const filePath of possiblePaths) {
    try {
      if (fs.existsSync(filePath)) {
        readmeContent = fs.readFileSync(filePath, 'utf-8')
        console.log(`README carregado com sucesso de: ${filePath}`)
        fileFound = true
        break
      }
    } catch (pathError) {
      continue
    }
  }
  
  if (!fileFound) {
    throw new Error('Arquivo dashReadme.md não encontrado em nenhum dos caminhos')
  }
} catch (error) {
  console.error('Erro ao carregar dashReadme.md:', error)
  // Fallback com conteúdo conhecido do arquivo
  readmeContent = `### Biodiversidade Online - Dashboard
Eduardo Dalcin e Henrique Pinheiro

#### Fontes de dados
* [Flora e Funga do Brasil](https://floradobrasil.jbrj.gov.br/consulta/).
* [Catálogo Taxonômico da Fauna do Brasil](http://fauna.jbrj.gov.br/)
* Banco de dados de espécies invasoras do [Instituto Hórus](https://institutohorus.org.br/).
* Espécies da flora avaliadas quanto ao risco de extinção pelo [CNCFlora](https://cncflora.jbrj.gov.br/), até 2022.
* [FAUNA - Lista de Espécies Ameaçadas - 2021](https://dados.mma.gov.br/dataset/especies-ameacadas/resource/544f9312-d4c6-4d12-b6ac-51bf3039bbb7)
* [Lista das UCs ativas no CNUC com respectivas categorias de manejo, área, esfera de governo, ano de criação e outras informações. Dados atualizados até março/2025](https://dados.mma.gov.br/dataset/unidadesdeconservacao/resource/f6bf9940-cf30-4ef2-927d-2bd278e4c8af).
* Registros de ocorrência da fauna e flora, provenientes de cerca de 490 repositórios (IPTs) - [lista](https://github.com/biopinda/DarwinCoreJSON/blob/main/referencias/occurrences.csv).`
}

// Mapeamento das categorias de ameaça
const categoryMapping: Record<string, string> = {
  'EX': 'Extinta (EX)',
  'EW': 'Extinta na Natureza (EW)',
  'CR': 'Criticamente em Perigo (CR)',
  'EN': 'Em Perigo (EN)',
  'VU': 'Vulnerável (VU)',
  'NT': 'Quase Ameaçada (NT)',
  'LC': 'Pouco Preocupante (LC)',
  'DD': 'Dados Insuficientes (DD)',
  'NE': 'Não Avaliada (NE)'
}

// Categorias válidas para totalização
const validCategories = ['EX', 'EW', 'CR', 'EN', 'VU', 'NT', 'LC', 'DD', 'NE']

// Mapeamento reverso para fauna (formato "Vulnerável (VU)" -> "VU")
const faunaReverseMapping: Record<string, string> = {
  'Extinta (EX)': 'EX',
  'Extinta na Natureza (EW)': 'EW',
  'Criticamente em Perigo (CR)': 'CR',
  'Em Perigo (EN)': 'EN',
  'Vulnerável (VU)': 'VU',
  'Quase Ameaçada (NT)': 'NT',
  'Pouco Preocupante (LC)': 'LC',
  'Dados Insuficientes (DD)': 'DD',
  'Não Avaliada (NE)': 'NE'
}

// Função para filtrar e mapear categorias (flora/fungi - códigos)
function filterAndMapCategories(categories: any[]) {
  if (!categories) return []
  return categories
    .filter(category => validCategories.includes(category._id))
    .map(category => ({
      ...category,
      displayName: categoryMapping[category._id] || category._id
    }))
}

// Função para filtrar e mapear categorias da fauna (formato completo)
function filterAndMapFaunaCategories(categories: any[]) {
  if (!categories) return []
  return categories
    .filter(category => {
      const code = faunaReverseMapping[category._id]
      return code && validCategories.includes(code)
    })
    .map(category => ({
      ...category,
      displayName: category._id // Já está no formato completo
    }))
}

// Função para processar markdown completo
function processMarkdown(content: string): string {
  return content
    .replace(/^### (.*)$/gm, '<h3 class="text-lg font-medium text-gray-800 mb-3 mt-4 pb-1 border-b border-gray-200">$1</h3>')
    .replace(/^#### (.*)$/gm, '<h4 class="text-base font-medium text-blue-700 mb-2 mt-3">$1</h4>')
    .replace(/^##### (.*)$/gm, '<h5 class="text-sm font-medium text-gray-600 mb-2 mt-3">$1</h5>')
    .replace(/^## (.*)$/gm, '<h2 class="text-xl font-semibold text-gray-800 mb-3 mt-6 pb-1 border-b border-gray-200">$1</h2>')
    .replace(/^# (.*)$/gm, '<h1 class="text-2xl font-bold text-gray-800 mb-4">$1</h1>')
    // Links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-blue-600 hover:text-blue-800 underline text-sm" target="_blank" rel="noopener noreferrer">$1</a>')
    // Listas com bullets
    .replace(/^\* (.*)$/gm, '<li class="text-gray-600 text-sm leading-relaxed">$1</li>')
    // Envolver listas em ul
    .replace(/(<li[^>]*>.*<\/li>\s*)+/gs, '<ul class="mb-3 ml-4 list-disc space-y-1">$&</ul>')
    // Quebras de linha
    .replace(/\n\n/g, '</p><p class="mb-3 text-gray-600 text-sm leading-relaxed">')
    .replace(/\n/g, '<br>')
    // Envolver em parágrafos
    .replace(/^(?!<[hul])/gm, '<p class="mb-3 text-gray-600 text-sm leading-relaxed">')
    .replace(/(?<!>)$/gm, '</p>')
    // Limpar tags vazias
    .replace(/<p class="mb-3 text-gray-600 text-sm leading-relaxed"><\/p>/g, '')
}

const [
  // Occurrences data
  occurrencesPlantae,
  occurrencesFungi,
  occurrencesAnimalia,
  // Taxa data
  taxaPlantae,
  taxaFungi,
  taxaAnimalia,
  // Threatened species data
  threatenedPlantae,
  threatenedFungi,
  threatenedAnimalia,
  // Threatened categories data
  threatenedCategoriesPlantae,
  threatenedCategoriesFungi,
  threatenedCategoriesAnimalia,
  // Invasive species data
  invasivePlantae,
  invasiveFungi,
  invasiveAnimalia,
  // Invasive top rankings
  invasiveTopOrdersAnimalia,
  invasiveTopFamiliesPlantae,
  // Taxa breakdown data
  taxaOrdersAnimalia,
  taxaFamiliesPlantae,
  taxaOrdersFungi
] = await Promise.all([
  getOccurrenceCountPerKingdom('Plantae'),
  getOccurrenceCountPerKingdom('Fungi'),
  getOccurrenceCountPerKingdom('Animalia'),
  getTaxaCountPerKingdom('Plantae'),
  getTaxaCountPerKingdom('Fungi'),
  getTaxaCountPerKingdom('Animalia'),
  getThreatenedCountPerKingdom('Plantae'),
  getThreatenedCountPerKingdom('Fungi'),
  getThreatenedCountPerKingdom('Animalia'),
  getThreatenedCategoriesPerKingdom('Plantae'),
  getThreatenedCategoriesPerKingdom('Fungi'),
  getThreatenedCategoriesPerKingdom('Animalia'),
  getInvasiveCountPerKingdom('Plantae'),
  getInvasiveCountPerKingdom('Fungi'),
  getInvasiveCountPerKingdom('Animalia'),
  getInvasiveTopOrders('Animalia'),
  getInvasiveTopFamilies('Plantae'),
  getTaxaCountPerOrderByKingdom('Animalia'),
  getTaxaCountPerFamilyByKingdom('Plantae'),
  getTaxaCountPerOrderByKingdom('Fungi')
])

if (
  occurrencesPlantae === null ||
  occurrencesFungi === null ||
  occurrencesAnimalia === null ||
  taxaPlantae === null ||
  taxaFungi === null ||
  taxaAnimalia === null ||
  threatenedPlantae === null ||
  threatenedFungi === null ||
  threatenedAnimalia === null ||
  threatenedCategoriesPlantae === null ||
  threatenedCategoriesFungi === null ||
  threatenedCategoriesAnimalia === null ||
  invasivePlantae === null ||
  invasiveFungi === null ||
  invasiveAnimalia === null ||
  invasiveTopOrdersAnimalia === null ||
  invasiveTopFamiliesPlantae === null ||
  taxaOrdersAnimalia === null ||
  taxaFamiliesPlantae === null ||
  taxaOrdersFungi === null
) {
  return new Response(null, { status: 503 })
}
---

<Layout title="Dashboard">
  <div class="h-screen w-screen p-2">
    <h1 class="text-3xl font-bold text-center mb-4">Biodiversidade On-line</h1>
    
    <!-- Tabs Navigation -->
    <div class="flex border-b border-gray-200 mb-4">
      <button
        class="tab-button px-6 py-3 font-medium text-sm border-b-2 border-blue-500 text-blue-600 bg-white"
        data-tab="taxa"
      >
        Taxa
      </button>
      <button
        class="tab-button px-6 py-3 font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 bg-white"
        data-tab="ocorrencias"
      >
        Ocorrências
      </button>
      <button
        class="tab-button px-6 py-3 font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 bg-white"
        data-tab="ameacadas"
      >
        Espécies Ameaçadas
      </button>
      <button
        class="tab-button px-6 py-3 font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 bg-white"
        data-tab="invasoras"
      >
        Espécies Invasoras
      </button>
      <button
        class="tab-button px-6 py-3 font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 bg-white"
        data-tab="sobre"
      >
        Sobre
      </button>
    </div>

    <!-- Tab Contents -->
    <div class="tab-content h-full">
      <!-- Taxa Tab -->
      <div id="taxa-content" class="tab-panel">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 h-full">
          <!-- Card Animalia -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-[500px]">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
                <img src="/animalia.svg" alt="Animalia" class="w-12 h-12 text-blue-600" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Animalia</h3>
            <p class="text-4xl font-bold text-blue-600 mb-2 text-center">{taxaAnimalia?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-3">nomes aceitos</p>
            
            {taxaOrdersAnimalia && taxaOrdersAnimalia.length > 0 ? (
              <div class="space-y-2 max-h-80 overflow-y-auto">
                <p class="text-sm font-semibold text-gray-700">Top 10 Ordens:</p>
                {taxaOrdersAnimalia.map((order: any) => (
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600 truncate pr-2">{order._id}</span>
                    <span class="text-blue-600 font-medium">{order.count.toLocaleString()}</span>
                  </div>
                ))}
              </div>
            ) : (
              <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
            )}
          </div>

          <!-- Card Plantae -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-[500px]">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
                <img src="/plantae.svg" alt="Plantae" class="w-12 h-12 text-green-600" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Plantae</h3>
            <p class="text-4xl font-bold text-green-600 mb-2 text-center">{taxaPlantae?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-3">nomes aceitos</p>
            
            {taxaFamiliesPlantae && taxaFamiliesPlantae.length > 0 ? (
              <div class="space-y-2 max-h-80 overflow-y-auto">
                <p class="text-sm font-semibold text-gray-700">Top 10 Famílias:</p>
                {taxaFamiliesPlantae.map((family: any) => (
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600 truncate pr-2">{family._id}</span>
                    <span class="text-green-600 font-medium">{family.count.toLocaleString()}</span>
                  </div>
                ))}
              </div>
            ) : (
              <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
            )}
          </div>

          <!-- Card Fungi -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-[500px]">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center">
                <img src="/fungi.svg" alt="Fungi" class="w-12 h-12 text-orange-600" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Fungi</h3>
            <p class="text-4xl font-bold text-orange-600 mb-2 text-center">{taxaFungi?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-3">nomes aceitos</p>
            
            {taxaOrdersFungi && taxaOrdersFungi.length > 0 ? (
              <div class="space-y-2 max-h-80 overflow-y-auto">
                <p class="text-sm font-semibold text-gray-700">Top 10 Ordens:</p>
                {taxaOrdersFungi.map((order: any) => (
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600 truncate pr-2">{order._id}</span>
                    <span class="text-orange-600 font-medium">{order.count.toLocaleString()}</span>
                  </div>
                ))}
              </div>
            ) : (
              <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
            )}
          </div>
        </div>
      </div>

      <!-- Ocorrências Tab -->
      <div id="ocorrencias-content" class="tab-panel hidden">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 h-full">
          <!-- Card Animalia -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 flex flex-col items-center justify-center">
            <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
              <img src="/animalia.svg" alt="Animalia" class="w-12 h-12 text-blue-600" />
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2">Animalia</h3>
            <p class="text-4xl font-bold text-blue-600 mb-2">{occurrencesAnimalia?.toLocaleString()}</p>
            <p class="text-gray-500 text-center">ocorrências registradas</p>
          </div>

          <!-- Card Plantae -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 flex flex-col items-center justify-center">
            <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
              <img src="/plantae.svg" alt="Plantae" class="w-12 h-12 text-green-600" />
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2">Plantae</h3>
            <p class="text-4xl font-bold text-green-600 mb-2">{occurrencesPlantae?.toLocaleString()}</p>
            <p class="text-gray-500 text-center">ocorrências registradas</p>
          </div>

          <!-- Card Fungi -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 flex flex-col items-center justify-center">
            <div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mb-4">
              <img src="/fungi.svg" alt="Fungi" class="w-12 h-12 text-orange-600" />
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2">Fungi</h3>
            <p class="text-4xl font-bold text-orange-600 mb-2">{occurrencesFungi?.toLocaleString()}</p>
            <p class="text-gray-500 text-center">ocorrências registradas</p>
          </div>
        </div>
      </div>

      <!-- Espécies Ameaçadas Tab -->
      <div id="ameacadas-content" class="tab-panel hidden">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 h-full">
          <!-- Card Animalia Ameaçada -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-[500px]">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
                <img src="/animalia.svg" alt="Animalia" class="w-12 h-12 text-red-600" style="filter: hue-rotate(240deg) saturate(2);" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Animalia</h3>
            <p class="text-4xl font-bold text-red-600 mb-2 text-center">{threatenedAnimalia?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-1">espécies ameaçadas</p>
            {threatenedAnimalia && taxaAnimalia ? (
              <p class="text-sm text-gray-400 text-center mb-3">
                ({((threatenedAnimalia / taxaAnimalia) * 100).toFixed(1)}% do total)
              </p>
            ) : (
              <div class="mb-3"></div>
            )}
            
            {(() => {
              const filteredCategories = filterAndMapFaunaCategories(threatenedCategoriesAnimalia)
              return filteredCategories && filteredCategories.length > 0 ? (
                <div class="space-y-2 max-h-80 overflow-y-auto">
                  <p class="text-sm font-semibold text-gray-700">Por categoria:</p>
                  {filteredCategories.map((category: any) => (
                    <div class="flex justify-between text-sm">
                      <span class="text-gray-600 truncate pr-2">{category.displayName}</span>
                      <span class="text-red-600 font-medium">{category.count}</span>
                    </div>
                  ))}
                </div>
              ) : (
                <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
              )
            })()}
          </div>

          <!-- Card Plantae Ameaçada -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-[500px]">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
                <img src="/plantae.svg" alt="Plantae" class="w-12 h-12 text-red-600" style="filter: hue-rotate(240deg) saturate(2);" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Plantae</h3>
            <p class="text-4xl font-bold text-red-600 mb-2 text-center">{threatenedPlantae?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-1">espécies ameaçadas</p>
            {threatenedPlantae && taxaPlantae ? (
              <p class="text-sm text-gray-400 text-center mb-3">
                ({((threatenedPlantae / taxaPlantae) * 100).toFixed(1)}% do total)
              </p>
            ) : (
              <div class="mb-3"></div>
            )}
            
            {(() => {
              const filteredCategories = filterAndMapCategories(threatenedCategoriesPlantae)
              return filteredCategories && filteredCategories.length > 0 ? (
                <div class="space-y-2 max-h-80 overflow-y-auto">
                  <p class="text-sm font-semibold text-gray-700">Por categoria:</p>
                  {filteredCategories.map((category: any) => (
                    <div class="flex justify-between text-sm">
                      <span class="text-gray-600 truncate pr-2">{category.displayName}</span>
                      <span class="text-red-600 font-medium">{category.count}</span>
                    </div>
                  ))}
                </div>
              ) : (
                <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
              )
            })()}
          </div>

          <!-- Card Fungi Ameaçada -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-[500px]">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                <img src="/fungi.svg" alt="Fungi" class="w-12 h-12 text-gray-500" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Fungi</h3>
            <p class="text-4xl font-bold text-gray-500 mb-2 text-center">{threatenedFungi?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-1">espécies ameaçadas</p>
            {threatenedFungi && taxaFungi ? (
              <p class="text-sm text-gray-400 text-center mb-3">
                ({((threatenedFungi / taxaFungi) * 100).toFixed(1)}% do total)
              </p>
            ) : (
              <div class="mb-3"></div>
            )}
            
            {(() => {
              const filteredCategories = filterAndMapCategories(threatenedCategoriesFungi)
              return filteredCategories && filteredCategories.length > 0 ? (
                <div class="space-y-2 max-h-80 overflow-y-auto">
                  <p class="text-sm font-semibold text-gray-700">Por categoria:</p>
                  {filteredCategories.map((category: any) => (
                    <div class="flex justify-between text-sm">
                      <span class="text-gray-600 truncate pr-2">{category.displayName}</span>
                      <span class="text-gray-500 font-medium">{category.count}</span>
                    </div>
                  ))}
                </div>
              ) : (
                <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
              )
            })()}
          </div>
        </div>
      </div>

      <!-- Espécies Invasoras Tab -->
      <div id="invasoras-content" class="tab-panel hidden">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 h-full">
          <!-- Card Animalia Invasora -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-96">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center">
                <img src="/animalia.svg" alt="Animalia" class="w-12 h-12 text-purple-600" style="filter: hue-rotate(180deg) saturate(1.5);" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Animalia</h3>
            <p class="text-4xl font-bold text-purple-600 mb-2 text-center">{invasiveAnimalia?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-3">espécies invasoras</p>
            
            {invasiveTopOrdersAnimalia && invasiveTopOrdersAnimalia.length > 0 ? (
              <div class="space-y-2 max-h-48 overflow-y-auto">
                <p class="text-sm font-semibold text-gray-700">Top 10 Ordens:</p>
                {invasiveTopOrdersAnimalia.map((order: any) => (
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600 truncate pr-2">{order._id}</span>
                    <span class="text-purple-600 font-medium">{order.count}</span>
                  </div>
                ))}
              </div>
            ) : (
              <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
            )}
          </div>

          <!-- Card Plantae Invasora -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-96">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center">
                <img src="/plantae.svg" alt="Plantae" class="w-12 h-12 text-purple-600" style="filter: hue-rotate(180deg) saturate(1.5);" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Plantae</h3>
            <p class="text-4xl font-bold text-purple-600 mb-2 text-center">{invasivePlantae?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-3">espécies invasoras</p>
            
            {invasiveTopFamiliesPlantae && invasiveTopFamiliesPlantae.length > 0 ? (
              <div class="space-y-2 max-h-48 overflow-y-auto">
                <p class="text-sm font-semibold text-gray-700">Top 10 Famílias:</p>
                {invasiveTopFamiliesPlantae.map((family: any) => (
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600 truncate pr-2">{family._id}</span>
                    <span class="text-purple-600 font-medium">{family.count}</span>
                  </div>
                ))}
              </div>
            ) : (
              <p class="text-gray-400 text-sm text-center">dados não disponíveis</p>
            )}
          </div>

          <!-- Card Fungi Invasora -->
          <div class="bg-white rounded-lg border border-slate-300 shadow-lg p-6 min-h-96">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center">
                <img src="/fungi.svg" alt="Fungi" class="w-12 h-12 text-purple-600" style="filter: hue-rotate(180deg) saturate(1.5);" />
              </div>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-2 text-center">Fungi</h3>
            <p class="text-4xl font-bold text-purple-600 mb-2 text-center">{invasiveFungi?.toLocaleString()}</p>
            <p class="text-gray-500 text-center mb-3">espécies invasoras</p>
          </div>
        </div>
      </div>

      <!-- Sobre Tab -->
      <div id="sobre-content" class="tab-panel hidden">
        <div class="bg-white rounded-lg border border-slate-300 shadow-lg h-full overflow-auto">
          <div class="max-w-3xl mx-auto p-6">
            <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <div class="markdown-content text-sm">
                <div set:html={processMarkdown(readmeContent)}></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabPanels = document.querySelectorAll('.tab-panel');

      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const targetTab = this.getAttribute('data-tab');

          // Remove active classes from all buttons
          tabButtons.forEach(btn => {
            btn.classList.remove('border-blue-500', 'text-blue-600');
            btn.classList.add('border-transparent', 'text-gray-500');
          });

          // Add active classes to clicked button
          this.classList.remove('border-transparent', 'text-gray-500');
          this.classList.add('border-blue-500', 'text-blue-600');

          // Hide all tab panels
          tabPanels.forEach(panel => {
            panel.classList.add('hidden');
          });

          // Show target tab panel
          document.getElementById(targetTab + '-content').classList.remove('hidden');
        });
      });
    });
  </script>
</Layout>
