---
import BaseLayout from '../layouts/base.astro'
import { countTaxa, listTaxaPaginated } from '../lib/mongo'

const taxaNum = (await countTaxa()) ?? 0

const searchParams: Record<string, string> = Object.fromEntries(
  Array.from(Astro.url.searchParams.entries())
)

const filter: Record<string, unknown> = structuredClone(searchParams)
if (filter.scientificName !== undefined) {
  filter.scientificName = new RegExp(filter.scientificName as string, 'i')
}
delete filter.page

let taxa: Record<string, unknown>[] = []
let total = 0
let totalPages = 0
const currentPage = searchParams.page ? +searchParams.page : 1
if (Object.keys(searchParams).length > 0) {
  ;({
    data: taxa,
    total,
    totalPages
  } = (await listTaxaPaginated(
    filter,
    searchParams.page ? +searchParams.page - 1 : 0,
    {
      taxonID: 1,
      scientificName: 1,
      _id: 0
    }
  )) ?? { data: [], total: 0, totalPages: 0 })
}

const searchParamsWithPage = (page: number) => {
  const params = new URLSearchParams(searchParams)
  params.set('page', page.toString())
  return `?${params.toString()}`
}
---

<BaseLayout title="Procura de Taxa">
  <img src="/logoReflora.svg" alt="Reflora Logo" />
  <section class="m-2 p-2 border rounded border-slate-400 inline-block">
    <h2 class="text-xl font-bold">Filtro</h2>
    <form class="inline-flex flex-col gap-1">
      <div class="row">
        <label for="scientificName">Nome Completo ou Gênero</label>
        <input
          id="scientificName"
          name="scientificName"
          type="text"
          class="border border-green-800 rounded p-1"
          value={searchParams.scientificName}
        />
      </div>
      <div class="flex justify-between items-center">
        <div>Taxa disponíveis: <b>{taxaNum}</b></div>
        <input
          class="p-1 px-2 rounded bg-green-800 text-white"
          type="submit"
          value="Filtrar"
        />
      </div>
    </form>
  </section>
  {
    taxa.length > 0 && (
      <section class="m-2">
        <div class="flex flex-row items-center pb-2 gap-2">
          <h2 class="text-xl font-bold">
            Resultados{total > 0 && <>: {total}</>}
          </h2>
          <a
            class="p-1 px-2 rounded bg-green-800 text-white hover:drop-shadow"
            href={`/api/taxa?scientificName=${searchParams.scientificName}`}
            download={`${searchParams.scientificName}.json`}
          >
            <li class="las la-save" />
            Baixar em JSON
          </a>
          <div class="grow" />
          {totalPages > 1 && (
            <>
              <div class="text-sm italic">
                Página {currentPage} / {totalPages}
              </div>

              <div class="flex flex-row gap-1">
                {currentPage > 1 && (
                  <a
                    class="p-1 px-2 rounded bg-green-800 text-white"
                    href={searchParamsWithPage(currentPage - 1)}
                  >
                    Anterior
                  </a>
                )}
                {currentPage < totalPages && (
                  <a
                    class="p-1 px-2 rounded bg-green-800 text-white"
                    href={searchParamsWithPage(currentPage + 1)}
                  >
                    Próxima
                  </a>
                )}
              </div>
            </>
          )}
        </div>
        <ul class="grid grid-cols-2 gap-2">
          {taxa.map((taxon) => {
            const pageId = `${(taxon.kingdom as string)[0]?.toUpperCase()}${
              taxon.taxonID
            }`
            return (
              <li class="border border-slate-400 rounded p-1">
                <a
                  class="text-green-800"
                  href={`/taxon/${(taxon.kingdom as string)[0]?.toUpperCase()}${
                    taxon.taxonID
                  }`}
                  transition:name={`hero-${pageId}`}
                >
                  {taxon.scientificName}
                </a>
                <a class="text-blue-600" href={`/taxon/${pageId}.json`}>
                  (json)
                </a>
              </li>
            )
          })}
        </ul>
      </section>
    )
  }
</BaseLayout>
