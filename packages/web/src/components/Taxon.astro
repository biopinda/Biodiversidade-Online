---
import FichaLink from './FichaLink.astro'
import Map from './Map.astro'
import Section from './Section.astro'
import TaxonLink from './TaxonLink.astro'
import type {
  ReferenceEntry,
  TaxonDocument,
  VernacularNameEntry
} from '@/lib/mongo'
interface Props {
  json: TaxonDocument
  pageId: string
}
const { pageId, json } = Astro.props

const fichaId: string =
  json.kingdom === 'Animalia'
    ? (json.bibliographicCitation?.match(/.+\/(\w+)/)?.[1] ?? '')
    : json.taxonID

const hasOccurrences = (json.occurrences?.length ?? 0) > 0
const hasOtherNames = (json.othernames?.length ?? 0) > 0
const hasVernacularNames = (json.vernacularname?.length ?? 0) > 0
const hasReferences = (json.reference?.length ?? 0) > 0
---

<div
  class="m-4 w-full rounded border border-slate-200 bg-white shadow-lg lg:w-[960px]"
>
  <div
    class="sticky top-0 z-10 mb-4 flex items-center gap-4 rounded-t bg-green-800 p-4 text-white"
  >
    <a
      href="/taxa"
      class="rounded-lg bg-white p-1 px-2 whitespace-nowrap text-black hover:text-green-800"
      ><i class="las la-search"></i> Busca</a
    >
    <h1 class="text-lg font-bold" transition:name={`hero-${pageId}`}>
      {json.scientificName}
    </h1>
    <div class="flex-1"></div>
    {
      hasOccurrences && (
        <a
          href={`/taxon/${pageId}/ocorrencias`}
          class="rounded-lg bg-white p-1 px-2 whitespace-nowrap text-black hover:text-green-800"
        >
          <i class="las la-th-list" /> Ocorrências
        </a>
      )
    }
  </div>
  <div class="grid grid-cols-1 gap-2 p-4 lg:grid-cols-2">
    <Section
      kingdom={json.kingdom}
      fields={{
        TaxonID: json.taxonID,
        'Nome científico': json.scientificName,
        'Nome científico autor': json.scientificNameAuthorship,
        'Nome aceito': json.acceptedNameUsage,
        'Nome aceito ID': json.acceptedNameUsageID,
        'Nome original ID': json.originalNameUsageID,
        'Nome publicado em': json.namePublishedIn,
        'Nome publicado em ano': {
          link: `/taxa?namePublishedInYear=${json.namePublishedInYear}`,
          text: json.namePublishedInYear
        },
        Reino: { link: `/taxa?kingdom=${json.kingdom}`, text: json.kingdom },
        Grupo: {
          link: `/taxa?higherClassification=${json.higherClassification}`,
          text: json.higherClassification
        },
        Família: { link: `/taxa?family=${json.family}`, text: json.family },
        Gênero: { link: `/taxa?genus=${json.genus}`, text: json.genus },
        'Epíteto específico': json.specificEpithet,
        Rank: json.taxonRank,
        'Status taxonômico': json.taxonomicStatus,
        'Status nomenclatural': json.nomenclaturalStatus,
        Modificado: json.modified,
        'Citação bibliográfica': json.bibliographicCitation
      }}
    />
    {
      Object.keys(json.distribution?.occurrence ?? {}).length > 0 && (
        <section class="flex flex-col">
          {json.distribution?.occurrence && (
            <div>
              <Map stateList={json.distribution.occurrence} />
            </div>
          )}
          <div>
            <Section
              title="Distribuição"
              fields={{
                Origem: json.distribution?.origin,
                Endemismo: json.distribution?.endemism,
                'Domínios fitogeográficos':
                  json.distribution?.phytogeographicDomains?.join(', '),
                Ocorrência: json.distribution?.occurrence?.sort().join(', '),
                'Tipo de vegetação':
                  json.distribution?.vegetationType?.join(', ')
              }}
            />
          </div>
        </section>
      )
    }
    {
      hasOtherNames && (
        <details>
          <summary class="pt-2 font-bold">Outros nomes</summary>
          <ul class="list-inside list-disc">
            {json.othernames?.map(({ taxonID, taxonomicStatus }) => (
              <li class="pl-2">
                <TaxonLink kingdom={json.kingdom} taxonId={taxonID} /> -{' '}
                {taxonomicStatus}
              </li>
            ))}
          </ul>
        </details>
      )
    }
    {
      hasVernacularNames && (
        <details>
          <summary class="pt-2 font-bold">Nomes vernaculares</summary>
          <ul class="list-disc pl-5">
            {json.vernacularname
              ?.sort((a: VernacularNameEntry, b: VernacularNameEntry) =>
                (a.vernacularName ?? '').localeCompare(b.vernacularName ?? '')
              )
              .map((entry: VernacularNameEntry) => {
                const vernacular = entry?.vernacularName ?? ''
                const locality = entry?.locality ?? ''
                const language = entry?.language ?? ''
                return (
                  <li>
                    {vernacular}
                    {locality ? `, ${locality}` : ''} -{' '}
                    <span class="text-xs italic">{language}</span>
                  </li>
                )
              })}
          </ul>
        </details>
      )
    }
  </div>

  <footer class="col-span-2 rounded-b bg-slate-100 p-2" title="Referência">
    {
      hasReferences && (
        <div class="italic">
          {json.reference?.map((reference: ReferenceEntry) => {
            const creator = reference?.creator
            const citation = reference?.bibliographicCitation
            const parts = [creator, citation].filter((value): value is string =>
              Boolean(value)
            )
            return <div>{parts.join(', ')}</div>
          })}
        </div>
      )
    }
    <FichaLink kingdom={json.kingdom} id={fichaId} />
  </footer>
</div>
